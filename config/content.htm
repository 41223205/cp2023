<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭檔案
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_roc_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打開輸出檔案時出錯。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 國旗顏色
    red = gdImageColorAllocate(img, 178, 34, 52); // 紅色條紋
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色條紋
    blue = gdImageColorAllocate(img, 60, 59, 110); // 藍色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 橫向星星之間的間距
    int star_spacing_y = (int)(0.054 * height); // 縱向星星之間的間距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 計算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋轉角度（以弧度為單位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋轉

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的顏色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_usa_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<h1>w7</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_proc_flag(gdImagePtr img);

int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度

    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);

    draw_proc_flag(im);

    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打開輸出檔案時出錯。\n");
        return 1;
    }

    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}

// 聲明 draw_star 函數
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_proc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;

    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);

    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);

    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);

    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    // 計算星形的五個外點和五個內點
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;

    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }

    // 使用 gdImageFilledPolygon 繪製星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_proc_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/proc_flag.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
 
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_japan_flag(img);
 
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
 
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    
 
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
 
 
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_japan_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/japan_flag.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);
 
int main() {
    // 設定國旗的寬和高
    int width = 1200;
    int height = width / 2;
 
    // 建立圖像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    // 繪製英國國旗
    draw_uk_flag(img);
 
    // 將圖像保存到檔案
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打開輸出檔案時發生錯誤。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
 
 
void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
 
    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 藍色
 
    gdImageFilledRectangle(img, 0, 0, width, height, blue);
 
 
  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);
 
    int x1, y1, x2, y2, x3, y3;
 
    // 繪製白色斜線
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);
 
    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);
 
     
    // 繪製紅色斜線
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);
 
  int x1, y1, x2, y2, x3, y3;
   
  // 繪製  斜線
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );
   
   
  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);
 
 
  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);
     
   
  }
   
    // 繪製白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;
 
    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);
 
    // 繪製紅色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}
</pre>
<p></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_uk_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="150" src="/images/uk_flag.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"
 
int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;
 
    im = gdImageCreate(WIDTH, HEIGHT);
 
    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);
 
    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);
 
    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);
 
    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);
 
  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     
 
  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);
 
  int circleX2 = 515;    // 圓心的 X 座標
   
 int circleY2 = 337.5;
 
  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);
   
  {
     
   
  // 起點和終點位置
   
  int startX = 340;    
  // 線的起點 X 座標
   
  int startY = 90;   
  // 線的起點 Y 座標
   
  int endX = 200;     
  // 線的終點 X 座標
   
  int endY = 260;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);
 
  int startX2 = 213;    
  // 線的起點 X 座標
 
  int startY2 = 270;   
  // 線的起點 Y 座標
 
  int endX2 = 133;     
  // 線的終點 X 座標
 
  int endY2 = 210;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);
 
  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置
   
  int startX = 330;    
  // 線的起點 X 座標
   
  int startY = 520;   
  // 線的起點 Y 座標
   
  int endX = 190;     
  // 線的終點 X 座標
   
  int endY = 350;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
 
  int startX2 = 213;    
  // 線的起點 X 座標
 
  int startY2 = 330;   
  // 線的起點 Y 座標
 
  int endX2 = 133;     
  // 線的終點 X 座標
 
  int endY2 = 390;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
 
  }
 
  {
    // 起點和終點位置
   
  int startX = 564;    
  // 線的起點 X 座標
   
  int startY = 520;   
  // 線的起點 Y 座標
   
  int endX = 704;     
  // 線的終點 X 座標
   
  int endY = 350;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
     
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);
     
gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);
     
  int startX2 = 553;    
  // 線的起點 X 座標
 
  int startY2 = 330;   
  // 線的起點 Y 座標
 
  int endX2 = 633;     
  // 線的終點 X 座標
 
  int endY2 = 390;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置
   
  int startX = 330;    
  // 線的起點 X 座標
   
  int startY = 520;   
  // 線的起點 Y 座標
   
  int endX = 190;     
  // 線的終點 X 座標
   
  int endY = 350;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
 
  int startX2 = 213;    
  // 線的起點 X 座標
 
  int startY2 = 330;   
  // 線的起點 Y 座標
 
  int endX2 = 133;     
  // 線的終點 X 座標
 
  int endY2 = 390;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
 
  }
  {
    // 起點和終點位置
   
  int startX = 564;    
  // 線的起點 X 座標
   
  int startY = 97;   
  // 線的起點 Y 座標
   
  int endX = 704;     
  // 線的終點 X 座標
   
  int endY = 267;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
     
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);
     
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);
     
  int startX2 = 553;    
  // 線的起點 X 座標
 
  int startY2 = 277;   
  // 線的起點 Y 座標
 
  int endX2 = 633;     
  // 線的終點 X 座標
 
  int endY2 = 217;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);
 
    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);
 
  }
   
    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_korea_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/korea_flag.png" width="300"/></p>
<h1>w12</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {

fprintf(stderr, "Error opening the output file.\n");

return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p>cd downloads</p>
<p>cc hellogd.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="300" src="/images/hellogd.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭檔案
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p>cd downloads</p>
<p>cc euler_gnuplot_msd_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>w16</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#define TIME_STEP 0.01 // 時間步長
#define SIMULATION_TIME 10.0 // 模擬時間

// 物體的參數
#define m1 2.0
#define m2 3.0
#define k1 0.5
#define k2 1.0
#define k3 1.5
#define c1 0.25
#define c2 0.33
#define c3 0.5
#define X1_initial 1.0
#define X2_initial -0.5
#define V0 0.0

// 計算阻尼力
double dampingForce(double c, double v) {
    return -c * v;
}

// 模擬物體運動
void simulateMotion() {
    double X1 = X1_initial;
    double X2 = X2_initial;
    double V1 = V0;
    double V2 = V0;

    FILE *fp;
    fp = fopen("motion_data.txt", "w");

    for (double t = 0; t &lt;= SIMULATION_TIME; t += TIME_STEP) {
        double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一個物體受到的合力
        double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二個物體受到的合力
        double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二個物體受到的合力

        double a1 = F1 / m1; // 第一個物體的加速度
        double a2 = F2 / m2; // 第二個物體的加速度

        // 更新速度和位置
        V1 += a1 * TIME_STEP;
        V2 += a2 * TIME_STEP;

        X1 += V1 * TIME_STEP;
        X2 += V2 * TIME_STEP;

  // 在檔案寫入時記錄 m1 和 m2 的位置和速度資料
  fprintf(fp, "%lf %lf %lf %lf %lf\n", t, X1, X2, V1, V2);
    }


    fclose(fp);
}

int main() {
    simulateMotion();
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/motion_plot.png" width="400"/></p><h1>ANSIC</h1>
<p><a href="https://www.w3resource.com/c-programming-exercises">https://www.w3resource.com/c-programming-exercises</a><span>/</span><span>自選 10 個練習範例</span></p>
<h2>練習一</h2>
<p><a href="https://www.w3resource.com/c-programming-exercises">https://www.w3resource.com/c-programming-exercises</a><span>/</span><span>自選 10 個練習範例</span></p>
<p><span>01.用 C 語言編寫一個程式來列印目前日期和時間</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;time.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void)
{
    time_t cur_time;   // 宣告 time_t 型別的變數 cur_time 用來存放時間戳
    char* cur_t_string; // 宣告指標 cur_t_string 用來存放時間轉換後的字串
    cur_time = time(NULL); // 使用 time 函式獲取當前的時間戳
    if (cur_time == ((time_t)-1))
    {
        (void) fprintf(stderr, "Failure to get the current date and time.\n"); // 如果獲取時間戳失敗，輸出錯誤訊息
        exit(EXIT_FAILURE);
    }
    cur_t_string = ctime(&amp;cur_time); // 將時間戳轉換成字串形式，並存入 cur_t_string
    if (cur_t_string == NULL)
    {
        (void) fprintf(stderr, "Failure to convert the current date and time.\n"); // 如果轉換時間字串失敗，輸出錯誤訊息
        exit(EXIT_FAILURE);
    }
    (void) printf("\n The Current time is : %s \n", cur_t_string); // 輸出格式化後的時間字串
    exit(EXIT_SUCCESS);
}
</pre>
<p></p>
<p><span><img alt="" height="152" src="/images/c01.c.png" width="562"/></span></p>
<p><span>02.用 C 語言寫一個程式來計算自月初以來經過的秒數。</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
 
int main(void)
{
    time_t now; // 宣告 time_t 型別的變數 now 用來存放時間戳
    time(&amp;now); // 使用 time 函式獲取當前的時間戳
 
    struct tm beg_month; // 宣告 struct tm 型別的變數 beg_month 用來存放月初的日期和時間
    beg_month = *localtime(&amp;now); // 使用 localtime 函式將時間戳轉換為本地時間結構體
    beg_month.tm_hour = 0; // 將小時部分設定為 0
    beg_month.tm_min = 0;  // 將分鐘部分設定為 0
    beg_month.tm_sec = 0;  // 將秒數部分設定為 0
    beg_month.tm_mday = 1; // 將月份的日數部分設定為 1，表示月初
 
    double seconds = difftime(now, mktime(&amp;beg_month)); // 計算當前時間與月初的時間差（秒數）
    printf("\n %.f seconds passed since the beginning of the month.\n\n", seconds); // 輸出經過的秒數
    return 0;
}
</pre>
<p><span><img alt="" height="96" src="/images/c02.c.png" width="586"/></span></p>
<p><span>03.用 C 寫一個程序，將 time_t 物件轉換為文字表示形式。<br/><br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;time.h&gt;
#include &lt;stdio.h&gt; 

int main(void)
{
    time_t result = time(NULL); // 獲取當前的時間戳
    printf("\n%s\n", ctime(&amp;result)); // 使用 ctime 函式將時間戳轉換為字串並輸出
    
#ifdef __STDC_LIB_EXT1__
    char time_str[26]; // 宣告 char 陣列 time_str 用來存放時間字串
    ctime_s(time_str, sizeof time_str, &amp;result); // 使用 ctime_s 函式將時間戳轉換為字串並存入 time_str
    printf("\n%s\n", time_str); // 輸出格式化後的時間字串
#endif
}
</pre>
<p><span><img alt="" height="87" src="/images/c03.c.png" width="298"/></span></p>
<p><span>04.用 C 編寫一個程序，將 tm 物件轉換為自訂文字表示形式。<br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; 
#include &lt;time.h&gt;
#include &lt;locale.h&gt;
 
int main(void)
{
    char time_buff[70]; // 宣告 char 陣列 time_buff 用來存放時間字串
    struct tm mytime = {
        .tm_year = 116,  // 年份為 2016，需減 1900
        .tm_mon = 8,     // 月份為 9th month，需減 1
        .tm_mday = 2,    // 日數為 2nd day
        .tm_hour = 16,   // 時間為 16 小時
        .tm_min = 30,    // 分鐘為 30 分鐘
        .tm_sec = 32     // 秒數為 32 秒
    };

    printf("\n The textual representation of specified date and time :\n"); 
    if (strftime(time_buff, sizeof time_buff, "%B %c %P", &amp;mytime)) 
    {
        puts(time_buff); // 輸出格式化後的時間字串
    } 
    else 
    {
        puts("strftime failed"); // 如果 strftime 函式失敗，輸出錯誤訊息
    }

    setlocale(LC_TIME, "el_GR.utf8"); // 設定本地化環境為希臘語

    if (strftime(time_buff, sizeof time_buff, "%B %c %P", &amp;mytime)) 
    {
        puts(time_buff); // 輸出在希臘語環境下格式化後的時間字串
    } 
    else 
    {
        puts("strftime failed"); // 如果 strftime 函式失敗，輸出錯誤訊息
    }

    printf("\n");     
}
</pre>
<p><span><img alt="" height="138" src="/images/c04.c.png" width="592"/></span></p>
<p><span>05.用 C 編寫一個程序，將 tm 物件轉換為自訂寬字串文字表示形式。<br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;wchar.h&gt;
#include &lt;locale.h&gt;
 
int main(void)
{
    wchar_t buff[40]; // 宣告 wchar_t 陣列 buff 用來存放寬字元時間字串
    struct tm mytime = {
        .tm_year = 116,  // 年份為 2016，需減 1900
        .tm_mon = 8,     // 月份為 9th month，需減 1
        .tm_mday = 2,    // 日數為 2nd day
        .tm_hour = 17,   // 時間為 17 小時
        .tm_min = 51,    // 分鐘為 51 分鐘
        .tm_sec = 10     // 秒數為 10 秒
    };

    printf("\n The textual representation of specified date and time :\n"); 
    if (wcsftime(buff, sizeof buff, L"%A %c", &amp;mytime)) 
    {
        printf("\n%ls\n", buff); // 輸出格式化後的寬字元時間字串
    } 
    else 
    {
        puts("wcsftime failed"); // 如果 wcsftime 函式失敗，輸出錯誤訊息
    }

    setlocale(LC_ALL, "en_US.UTF-8"); // 設定本地化環境為英文（美國）

    if (wcsftime(buff, sizeof buff, L"%A %c", &amp;mytime)) 
    {
        printf("%ls\n\n", buff); // 輸出在英文（美國）環境下格式化後的寬字元時間字串
    } 
    else 
    {
        puts("wcsftime failed"); // 如果 wcsftime 函式失敗，輸出錯誤訊息
    }
}
</pre>
<p><span><img alt="" height="146" src="/images/c05.c.png" width="592"/></span></p>
<p><span>06.用 C 語言編寫一個程序，將 time_t 物件轉換為以協調世界時表示的日曆時間。<br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t t = time(NULL); // 取得目前的時間
    printf("\nThe calendar time expressed as Coordinated Universal Time is :");
    
    // 使用 gmtime 函式轉換成 UTC（協調世界時）時間，再用 asctime 函式轉換成文字表示形式
    printf("\nUTC:   %s", asctime(gmtime(&amp;t)));
    
    // 使用 localtime 函式轉換成本地時間，再用 asctime 函式轉換成文字表示形式
    printf("local: %s\n", asctime(localtime(&amp;t)));
 
#ifdef __STDC_LIB_EXT1__
    struct tm buf;
    char str[26];

    // 使用 gmtime_s 函式轉換成 UTC（協調世界時）時間，再用 asctime_s 函式轉換成文字表示形式
    asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));
    printf("UTC:   %s", str);

    // 使用 localtime_s 函式轉換成本地時間，再用 asctime_s 函式轉換成文字表示形式
    asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));
    printf("local: %s", str);
#endif
}
</pre>
<p><span><img alt="" height="132" src="/images/c06.c.png" width="658"/></span></p>
<p><span>07.用 C 寫一個程序，將 time_t 物件轉換為表示為本地時間的日曆時間。<br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t t = time(NULL);
    printf("\nThe calendar time expressed as a local Time is :");
    
    // 使用 gmtime 函式轉換成 UTC（協調世界時）時間，再用 asctime 函式轉換成文字表示形式
    printf("\nUTC:   %s", asctime(gmtime(&amp;t)));
    
    // 使用 localtime 函式轉換成本地時間，再用 asctime 函式轉換成文字表示形式
    printf("local: %s\n", asctime(localtime(&amp;t)));
 
#ifdef __STDC_LIB_EXT1__
    struct tm buf;
    char str[26];

    // 使用 gmtime_s 函式轉換成 UTC（協調世界時）時間，再用 asctime_s 函式轉換成文字表示形式
    asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));
    printf("UTC:   %s", str);

    // 使用 localtime_s 函式轉換成本地時間，再用 asctime_s 函式轉換成文字表示形式
    asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));
    printf("local: %s", str);
#endif
}
</pre>
<p><span><img alt="" height="137" src="/images/c07.c.png" width="502"/></span></p>
<p><span>08.用 C 語言寫一個程序，列印 24 個月之前的日期和時間。<br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _POSIX_C_SOURCE 200112L 
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
 
int main(void)
{
    setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);   // 設置時區為亞洲/加爾各答 (Indian Standard Time, IST)
    struct tm tm = *localtime(&amp;(time_t){time(NULL)});       // 取得當前時間的 tm 結構體
    printf("\n今天是：            %s", asctime(&amp;tm));        // 印出當前時間和當前是否為夏令時（DST）的狀態
    printf("(夏令時 %s)\n", tm.tm_isdst ? "生效中" : "未生效");
    tm.tm_mon -= 24;                                        // 修改 tm 結構體的 tm_mon 成員，將月份減去 24
    mktime(&amp;tm);                                            // 使用 mktime 函式將修改後的 tm 結構體轉換為時間戳
    printf("\n24個月前的日期是： %s", asctime(&amp;tm));        // 再次印出修改後的時間和當前是否為夏令時（DST）的狀態
    printf("(夏令時 %s)\n\n", tm.tm_isdst ? "生效中" : "未生效");
}
</pre>
<p><span><img alt="" height="168" src="/images/c08.c.png" width="560"/></span></p>
<p><span>09.用C語言寫一個程式來顯示日曆時間的第一個時間。<br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
 
int main(void)
{
    struct tm first = {.tm_mday=1};   // 初始化 tm 結構體，將日期設為每月的第一天
    mktime(&amp;first);                    // 使用 mktime 函數轉換 tm 結構體為時間戳
    printf("\n%s\n", asctime(&amp;first)); // 印出轉換後的時間戳對應的日期和時間
}
</pre>
<p><span><img alt="" height="97" src="/images/c09.c.png" width="307"/></span></p>
<p><span>10.</span>用 C 寫一個程式來顯示紀元的開始。</p>
<p>註：紀元是指某人歷史上某個時期的開始。<span><br/></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
 
int main(void)
{
    time_t epoch = 0;                            // 設定時間戳為 0，表示 Epoch 開始的時間
    printf("\n%ld seconds since the epoch began\n", (long)epoch); // 印出距離 Epoch 開始的秒數
    printf("%s\n", asctime(gmtime(&amp;epoch)));     // 使用 gmtime 將時間戳轉換為格林威治時間並印出
}
</pre>
<p><img alt="" height="112" src="/images/c10.c.png" width="318"/></p>
<p><span></span></p>
<h2>Exercises</h2>
<p><a href="https://www.w3resource.com/c-programming-exercises">https://www.w3resource.com/c-programming-exercises</a>/<span>自選 10 個練習範例</span></p>
<p>01.編寫一個 C 程序，將指定的日期轉換為年、週和日。<br/>註：忽略閏年。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int days, years, weeks;

    days = 1329; // 總天數

    // 將天數轉換為年、週和天
    years = days / 365; // 計算年
    weeks = (days % 365) / 7; // 計算週
    days = days - ((years * 365) + (weeks * 7)); // 計算剩餘的天數

    // 輸出結果
    printf("Years: %d\n", years); // 年
    printf("Weeks: %d\n", weeks); // 週
    printf("Days: %d \n", days);  // 天

    return 0;
}</pre>
<p>測試資料：<br/>天數：1329<br/>預期輸出：<br/>年：3<br/>週：33<br/>天：3</p>
<p><img alt="" height="98" src="/images/day.c.png" width="297"/></p>
<p>02.寫一個 C 程序，接受使用者提供的兩個整數併計算這兩個整數的乘積。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">c
Copy code
#include &lt;stdio.h&gt;

int main() 
{
    int x, y, result; // 宣告兩個整數和它們的乘積的變數

    // 提示用戶輸入，並將輸入的值存儲在 'x' 中
    printf("\n輸入第一個整數："); 
    scanf("%d", &amp;x);

    // 提示用戶輸入，並將輸入的值存儲在 'y' 中
    printf("\n輸入第二個整數：");
    scanf("%d", &amp;y);

    result = x * y; // 計算 'x' 和 'y' 的乘積

    // 輸出乘積的結果
    printf("上述兩個整數的乘積 = %d\n", result);

    return 0; // 表示程式執行成功的返回值
}</pre>
<p>測試資料：<br/>輸入第一個整數：58<br/>輸入第二個整數：69<br/>預期輸出：<br/>以上兩個整數的乘積 = 4002</p>
<p><img alt="" height="141" src="/images/multiply.c.png" width="411"/></p>
<p>03.寫一個計算球體體積的 C 程式。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;     // 匯入標準輸入/輸出的標頭檔。

float myradius;          /* 球體的半徑 */
float myvolume;          /* 球體的體積（待計算） */
char line_text[50];      /* 從鍵盤輸入的一行文字 */

/* 圓周率π的值到小數點後50位，取自維基百科 */
const float PI = 3.14159265358979323846264338327950288419716939937510;

int main() {
    printf("輸入球體的半徑：");  // 提示使用者輸入球體的半徑。
    fgets(line_text, sizeof(line_text), stdin);  // 從使用者讀取一行輸入，並將其存儲在 'line_text' 中。
    sscanf(line_text, "%f", &amp;myradius);         // 將 'line_text' 中的輸入轉換為浮點數，並將其存儲在 'myradius' 中。

    myvolume = (4.0 / 3.0) * PI * (myradius * myradius * myradius);  /* 使用公式計算球體的體積。 */
    printf("球體的體積為 %f。\n", myvolume);  // 輸出計算得到的球體體積。

    return(0);   // 返回0以表示程式執行成功。
}
</pre>
<p>測試資料:<br/>輸入球體的半徑：2.56</p>
<p>預計輸出:<br/>球體的體積為 70.276237。</p>
<p><img alt="" height="85" src="/images/volume.c.png" width="381"/></p>
<p>04.用 C 語言編寫一個程序，讀取名字、姓氏和出生年份，並依序顯示姓名和年份。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;    // 包含標準輸入/輸出標頭檔。

int main() {
    char firstname[20], lastname[20];   // 宣告字元陣列，用於存儲名字和姓氏，每個最大長度為20個字元。
    int bir_year;   // 宣告一個整數變數 'bir_year' 來存儲出生年份。

    printf("輸入您的名字：");   // 提示使用者輸入他們的名字。
    scanf("%s", firstname);   // 讀取並將使用者的輸入存儲在 'firstname' 中。

    printf("輸入您的姓氏：");   // 提示使用者輸入他們的姓氏。
    scanf("%s", lastname);   // 讀取並將使用者的輸入存儲在 'lastname' 中。

    printf("輸入您的出生年份：");   // 提示使用者輸入他們的出生年份。
    scanf("%d", &amp;bir_year);   // 讀取並將使用者的輸入存儲在 'bir_year' 中。

    printf("%s %s %d\n", firstname, lastname, bir_year);   // 輸出名字、姓氏和出生年份。

    return 0;   // 返回0以表示程式執行成功。
}
</pre>
<p>測試資料:</p>
<p>輸入您的名字：Chen<br/>輸入您的姓氏：Anjin<br/>輸入您的出生年份：2004<br/>Chen Anjin 2004</p>
<p><img alt="" height="121" src="/images/name.c.png" width="315"/></p>
<p>05.如果給定兩個角，請寫一個 C 程式來求三角形的第三個角。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()  
{  
    int ang1, ang2, ang3; /* 分別是三角形的三個角度 */
  
    /* 從使用者讀取兩個三角形的角度，以逗號分隔 */  
    printf("輸入兩個三角形的角度，用逗號分隔：");  
    scanf("%d, %d", &amp;ang1, &amp;ang2);  
  
    ang3 = 180 - (ang1 + ang2);  /* 計算第三個角度 */
  
    printf("三角形的第三個角度：%d\n", ang3);  
  
    return 0;  
}  
</pre>
<p>測試資料：<br/>輸入以逗號分隔的三角形的兩個角：50,70<br/>三角形的第三個角：60</p>
<p><img alt="" height="78" src="/images/triangle_1.c.png" width="571"/></p>
<p>06.寫一個C 程式來檢查給定的數字是偶數還是奇數</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;   // 包含標準輸入/輸出標頭檔。

void main()
{
    int num1, rem1;   // 宣告兩個整數變數 'num1' 和 'rem1'。

    printf("輸入一個整數：");   // 提示使用者輸入一個整數。
    scanf("%d", &amp;num1);   // 讀取並將使用者的輸入存儲在 'num1' 中。
    rem1 = num1 % 2;   // 計算 'num1' 除以 2 的餘數。
    if (rem1 == 0)   // 檢查餘數是否等於 0。
        printf("%d 是偶數\n", num1);   // 輸出一條消息，指示 'num1' 是偶數。
    else
        printf("%d 是奇數\n", num1);    // 輸出一條消息，指示 'num1' 是奇數。
}
</pre>
<p>測試資料：15<br/>15 是奇數</p>
<p><img alt="" height="98" src="/images/number.c.png" width="317"/></p>
<p>07.寫一個 C 程式來找出給定年份是否為閏年。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;   // 包含標準輸入/輸出標頭檔。

void main()
{
    int chk_year;   // 宣告一個整數變數 'chk_year'。

    printf("輸入一個年份：");   // 提示使用者輸入一個年份。
    scanf("%d", &amp;chk_year);   // 讀取並將使用者的輸入存儲在 'chk_year' 中。
    if ((chk_year % 400) == 0)   // 檢查 'chk_year' 是否能被400整除且沒有餘數。
        printf("%d 年是閏年。\n", chk_year);   // 輸出一條消息，指示 'chk_year' 是閏年。
    else if ((chk_year % 100) == 0)   // 檢查 'chk_year' 是否能被100整除且沒有餘數。
        printf("%d 年不是閏年。\n", chk_year);   // 輸出一條消息，指示 'chk_year' 不是閏年。
    else if ((chk_year % 4) == 0)   // 檢查 'chk_year' 是否能被4整除且沒有餘數。
        printf("%d 年是閏年。\n", chk_year);   // 輸出一條消息，指示 'chk_year' 是閏年。
    else
        printf("%d 年不是閏年。\n", chk_year);   // 輸出一條消息，指示 'chk_year' 不是閏年。
}
</pre>
<p>測試資料：2023<br/>2023年不是閏年。</p>
<p><img alt="" height="80" src="/images/year.c.png" width="302"/></p>
<p>08.寫一個 C 程式來找出三個數中最大的一個。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;   // 包含標準輸入/輸出標頭檔。

void main()
{
    int num1, num2, num3;   // 宣告三個整數變數 'num1'、'num2' 和 'num3'。

    printf("輸入三個數字的值：");   // 提示使用者輸入三個數字。
    scanf("%d %d %d", &amp;num1, &amp;num2, &amp;num3);   // 讀取並將使用者的輸入存儲在 'num1'、'num2' 和 'num3' 中。

    printf("第一個數字 = %d，\t第二個數字 = %d，\t第三個數字 = %d\n", num1, num2, num3);   // 輸出 'num1'、'num2' 和 'num3' 的值。

    if (num1 &gt; num2)   // 檢查 'num1' 是否大於 'num2'。
    {
        if (num1 &gt; num3)   // 如果 'num1' 也大於 'num3'。
        {
            printf("第一個數字是三個數字中最大的。\n");   // 輸出一條消息，指示 'num1' 是最大的。
        }
        else
        {
            printf("第三個數字是三個數字中最大的。\n");   // 輸出一條消息，指示 'num3' 是最大的。
        }
    }
    else if (num2 &gt; num3)   // 如果 'num1' 不是最大的，檢查 'num2' 是否大於 'num3'。
        printf("第二個數字是三個數字中最大的。\n");   // 輸出一條消息，指示 'num2' 是最大的。
    else
        printf("第三個數字是三個數字中最大的。\n");   // 如果上述條件都不滿足，則 'num3' 必須是最大的。
}
</pre>
<p>測試數據：12 25 52<br/>預期輸出：<br/>第一個數字 = 12，第二個數字 = 25，第三個數字 = 52<br/>第三個數字是三個數字中最大的</p>
<p><img alt="" height="127" src="/images/big.c.png" width="562"/></p>
<p>09.寫一個C 程式來檢查三角形是等邊三角形、等腰三角形還是不等邊三角形。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // 包含標準輸入/輸出標頭檔。

int main()  
{  
    int sidea, sideb, sidec; // 宣告變數用於三角形的三邊。

    /* 
     * 讀取三角形的所有邊長 
     */  
    printf("輸入三角形的三個邊長: ");  // 提示使用者輸入。
    scanf("%d %d %d", &amp;sidea, &amp;sideb, &amp;sidec);  // 讀取並存儲三角形的邊長。

    if(sidea==sideb &amp;&amp; sideb==sidec) // 檢查是否三邊長都相等。  
    {  
        printf("這是一個等邊三角形。\n");  // 輸出等邊三角形的訊息。
    }  
    else if(sidea==sideb || sidea==sidec || sideb==sidec) // 檢查是否有兩邊長相等。  
    {  
        printf("這是一個等腰三角形。\n");  // 輸出等腰三角形的訊息。
    }  
    else // 如果沒有邊長相等。  
    {  
        printf("這是一個不等邊三角形。\n");  // 輸出不等邊三角形的訊息。
    }  

    return 0;  
} 
</pre>
<p>測試資料：<br/>50 50 60<br/>預期輸出：<br/>這是一個等腰三角形。</p>
<p><img alt="" height="102" src="/images/triangle_2.c.png" width="397"/></p>
<p>10.寫一個 C 程式來計算交易的損益。</p>
<p>程式:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // 包含標準輸入/輸出標頭檔。

void main()  
{  
    int cprice, sprice, plamt;  // 宣告變數來存儲成本價格、售價和利潤/損失金額。

    printf("輸入成本價格: ");  // 提示使用者輸入成本價格。
    scanf("%d", &amp;cprice);  // 讀取並存儲成本價格。
    printf("輸入售價: ");  // 提示使用者輸入售價。
    scanf("%d", &amp;sprice);  // 讀取並存儲售價。

    if(sprice &gt; cprice)  // 檢查售價是否大於成本價格。
    {  
        plamt = sprice - cprice;  // 計算利潤金額。
        printf("\n您可以預定您的利潤金額: %d\n", plamt);  // 輸出利潤消息。
    }  
    else if(cprice &gt; sprice)  // 檢查成本價格是否大於售價。
    {  
        plamt = cprice - sprice;  // 計算損失金額。
        printf("\n您遭受了損失金額: %d\n", plamt);  // 輸出損失消息。
    }  
    else  // 如果既沒有利潤也沒有損失。
    {  
        printf("\n您處於無利潤、無損失的狀態。\n");  // 輸出無利潤、無損失的消息。
    }  
}  
</pre>
<p>測試資料：<br/>500 700<br/>預期輸出：<br/>您可以預訂您的利潤金額： 200 點</p>
<p><img alt="" height="101" src="/images/money.c.png" width="387"/></p>
<h1>c_ex</h1>
<h2>Exercises</h2>
<h3>Introduction</h3>
<p>01.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* 函式用來找出一年級學生中最高分的學生 */
#include &lt;stdio.h&gt;

double getmarks(double pupils[]);

int main()
{
    double pupil;
    /* 預設在程式主要部分的一年級學生的分數陣列 */
    double marks[] = {10.6, 23.7, 67.9, 93.0, 64.2, 33.8, 57.5, 82.2, 50.7, 45.7};
    
    /* 呼叫 getmarks 函式。該函式將回傳最高分，然後存入 pupil 中 */
    pupil = getmarks(marks);
    printf("最高分是 = %f", pupil);
    
    return 0;
}

/* 函式用來找出學生陣列中的最高分 */
double getmarks(double pupils[])
{
    int i;
    double highest;
    highest = 0;
    
    /* 逐一檢查所有學生的分數，並儲存最高分 */
    for (i = 0; i &lt; 10; ++i)
    {
        if (highest &lt; pupils[i])
            highest = pupils[i];
    }
    
    return highest; /* 將最高分回傳至呼叫該函式的地方 */
}
</pre>
<p><img alt="" height="72" src="/images/i01.png" width="460"/></p>
<p>02.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
/* multiply two floating point numbers */
int main()
{
float this_is_a_number1, this_is_a_number2, total;
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number1); /* read number in */
printf("You entered %f\n", this_is_a_number1);
printf("Please enter another number: \n");
scanf("%f", &amp;this_is_a_number2); /* read number in */
printf("You entered %f\n", this_is_a_number2);
total = this_is_a_number1 * this_is_a_number2;/* multiply the numbers */
printf("product is %f\n", total);
return 0;
}</pre>
<p><img alt="" height="157" src="/images/02.png" width="292"/></p>
<p>03.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* demonstrate a forloop */
main()
{
float this_is_a_number, total;
int i;
total = 0;
/* forloop goes round 10 times */
for (i = 0;i &lt; 10;i++)
{
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number); /* read number in */
total = total + this_is_a_number;
}
printf("Total Sum is = %f\n", total);
}</pre>
<p><img alt="" height="161" src="/images/03.png" width="292"/></p>
<p>04.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* demonstrate a do loop */
main()
{
float this_is_a_number, total;
int i;
total = 0;
i = 0;
/* do loop goes round until the value of i reaches 10 */
do {
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number);
total = total + this_is_a_number;
i++;
}while( i &lt; 10);
printf("Total Sum is = %f\n", total);
}</pre>
<p><img alt="" height="27" src="/images/04.png" width="256"/></p>
<p>05.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
/* Example of an if then else if operation */
int main()
{
int this_is_a_number;
printf("Please enter an integer between 1 and 10:\n ");
scanf("%d", &amp;this_is_a_number);
if (this_is_a_number &lt; 6)
printf("This number is less than 6;\n ");
printf("Please enter an integer between 10 and 20:\n ");
scanf("%d", &amp;this_is_a_number);
if (this_is_a_number &lt; 16)
{
printf("This number is less than 16\n ");
}
else if (this_is_a_number == 20)
{
printf("This number is 20\n ");
}
else
{
printf("This number is greater than 15\n ");
}
return 0;
}</pre>
<p><img alt="" height="23" src="/images/05.png" width="258"/></p>
<p>06.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* program to show character array use */
int main()
{
char arr2[10];/* define array of 10 characters */
int i;
printf("enter 10 characters \n");
for (i = 0;i &lt; 10;i++)
{
scanf("%c", &amp;arr2[i]);
}
printf("Your 10 characters are \n");
for (i = 0;i &lt; 10;i++)
{
printf("%c ", arr2[i]);
}
printf("\n");
}
</pre>
<p><img alt="" height="22" src="/images/06.png" width="258"/></p>
<p>07.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* program to show array use */
int main()
{
int arr1[8];/* define an array of 8 integers */
int i;
printf("enter 8 integer numbers\n");
for (i = 0;i &lt; 8;i++)
{
scanf("%d", &amp;arr1[i]);/* read into arr1[i] */
}
printf("Your 8 numbers are \n");
for (i = 0;i &lt; 8;i++)
{
printf("%d ", arr1[i]);
}
printf("\n");
}</pre>
<p><img alt="" height="123" src="/images/07.png" width="432"/></p>
<p>08.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
/* Example of an if operation */
int main()
{
int this_is_a_number;
printf( "Please enter an integer between 1 and 10:\n " );
scanf( "%d", &amp;this_is_a_number );
if (this_is_a_number &lt;6)
printf( "This number is less than 6;\n " );
printf( "Please enter an integer between 10 and 20:\n " );
scanf( "%d", &amp;this_is_a_number );
if (this_is_a_number &lt;16)
printf( "This number is less than 16\n " );
else
printf( "This number is greater than 15\n " );
return 0;
}</pre>
<p><img alt="" height="120" src="/images/08.png" width="427"/></p>
<p>09.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* demonstrate a nested forloop */
main()
{
float this_is_a_number, total;
int i, j;
total = 0;
/* outer forloop goes round 10 times */
for (i = 0;i &lt; 10;i++)
{
/* inner forloop goes round twice */
for (j = 0;j &lt; 2;j++)
{
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number); /* read number in */
total = total + this_is_a_number;
}
}
printf("Total Sum is = %f\n", total);
}</pre>
<p><img alt="" height="242" src="/images/09.png" width="287"/></p>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* divide two floating point numbers */
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
/* divide two floating point numbers */
int main()
{
float this_is_a_number1, this_is_a_number2, total;
printf("Please enter a number: \n");
scanf("%f", &amp;this_is_a_number1); /* read number in */
printf("You entered %f\n", this_is_a_number1);
printf("Please enter another number:\n ");
scanf("%f", &amp;this_is_a_number2); /* read number in */
printf("You entered %f\n", this_is_a_number2);
total = this_is_a_number1 / this_is_a_number2;/* divide the numbers */
printf("quotient is %f\n", total);
return 0;
}</pre>
<p><img alt="" height="265" src="/images/010.png" width="287"/></p><h3>jsliu</h3>
<p>01.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
switch - case 的範例 1.
==================== */
#include &lt;stdio.h&gt;
void main()
{
char c;
printf( "Input a char:" );
scanf( "%c", &amp;c );
switch( c )
{
case 'a':
printf(" you pressed a ");
break;
case 'b':
printf(" you pressed b ");
break;
case 'c':
printf(" you pressed c ");
break;
default:
printf(" not a, b, c ");
break;
}
}</pre>
<p><img alt="" height="208" src="/images/j01.c.png" width="435"/></p>
<p>02.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Say Hello World! Bye Bye.
==================== */
#include &lt;stdio.h&gt;
int main()
{
/* 印出 Hello World! Bye Bye */
printf("Hello World! ");
printf("Bye ");
printf("Bye");
return 0;
}</pre>
<p><img alt="" height="166" src="/images/j02.c.png" width="350"/></p>
<p>03.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
while 的範例 1.
==================== */
#include &lt;stdio.h&gt;
void main()
{
int i, j;
i = 0; j = 10; /* 迴圈外先設定初值 */
while( i &lt; 6 )
{
printf( "i = %d, ", i );
printf( "j = %d \n", j );
i++;
j++;
}
}</pre>
<p><img alt="" height="168" src="/images/j03.c.png" width="307"/></p>
<p>04.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
do - while.
==================== */
#include &lt;stdio.h&gt;
void main()
{
int i, j;
i = 0; j = 10; /* 迴圈外先設定初值 */
do
{
printf( "i = %d, ", i );
printf( "j = %d \n", j );
i++;
j++;
}
while( i &lt; 6 ); /* 檢查條件的地方 */
}</pre>
<p><img alt="" height="165" src="/images/j04.c.png" width="298"/></p>
<p>05.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
array - 1.
==================== */
#include &lt;stdio.h&gt;
int main()
{
int grade[5]; /* size = 5 的 array */
int i;
grade[0] = 75; /* 1st element */
grade[1] = 80; /* 2nd element */
grade[2] = 85; /* 3rd element */
grade[3] = 70; /* 4th element */
grade[4] = 90; /* 5th element */
for( i = 0; i &lt; 5; i ++ )
{
printf("Number %d = %d\n", i, grade[ i ] );
}
return 0;
}</pre>
<p><img alt="" height="137" src="/images/j05.c.png" width="293"/></p>
<p>06.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
變數宣告的例子 3.
==================== */
#include &lt;stdio.h&gt;
int main()
{
int a = 1;
int A = 8;
int b = 2, c;
c = A - a + b;
/* 輸出 a, A, b, c 到螢幕 */
printf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );
return 0;
}</pre>
<div class="line number1 index0 alt2"><code class="cpp comments"></code></div>
<p><img alt="" height="41" src="/images/6.png" width="282"/></p>
<p>07.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
輸入一個整數
========================= */
#include &lt;stdio.h&gt;
int main()
{
int i;
printf("Input an integer:");
scanf( "%d", &amp;i ); /* ch 前面加個 &amp;(位址運算元) */
printf( "the number is %d", i );
return 0;
}</pre>
<p><img alt="" height="72" src="/images/7.png" width="372"/></p>
<p>08.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Logical NOT.
==================== */
#include &lt;stdio.h&gt;
void main()
{
int a;
a = 3;
printf("%d\n", !a );
a = 0;
printf("%d\n", !a );
}</pre>
<p><img alt="" height="60" src="/images/8.png" width="285"/></p>
<p>09.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
基本運算範例.
==================== */
#include&lt;stdio.h&gt;
int main()
{
int a,b;
a = 10; b = 3;
printf( "%d \n", a * b );
printf( "%d \n", a / b );
printf( "%d \n", a + b );
printf( "%d \n", a - b );
printf( "%d \n", a % b );
return 0;
}</pre>
<p><img alt="" height="120" src="/images/9.png" width="282"/></p>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
關係運算元的範例.
==================== */
#include &lt;stdio.h&gt;
int main()
{
int a = 10, b = 5;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
printf( "\n" );
b = 10;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
return 0;
}</pre>
<p><img alt="" height="277" src="/images/10.png" width="282"/></p><h2>練習二</h2>
<h3>Introduction</h3>
<p><video controls="controls" height="630" width="1008">
<source src="/images/int.mp4" type="video/mp4"/></video></p>
<p>01.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Read in two integers , add them and display the answer */
#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
int main()
{
int this_is_a_number1, this_is_a_number2, total;
printf("Please enter an integer number:\n ");
scanf("%d", &amp;this_is_a_number1); /* read number in */
printf("You entered %d\n", this_is_a_number1);
printf("Please enter another number: \n");
scanf("%d", &amp;this_is_a_number2); /* read number in */
printf("You entered %d\n", this_is_a_number2);
total = this_is_a_number1 + this_is_a_number2;/* add two numbers */
printf("total is %d\n", total);
return 0;
}</pre>
<p>02.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
/* multiply two floating point numbers */
int main()
{
float this_is_a_number1, this_is_a_number2, total;
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number1); /* read number in */
printf("You entered %f\n", this_is_a_number1);
printf("Please enter another number: \n");
scanf("%f", &amp;this_is_a_number2); /* read number in */
printf("You entered %f\n", this_is_a_number2);
total = this_is_a_number1 * this_is_a_number2;/* multiply the numbers */
printf("product is %f\n", total);
return 0;
}</pre>
<p>03.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* divide two floating point numbers */
#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
/* divide two floating point numbers */
int main()
{
float this_is_a_number1, this_is_a_number2, total;
printf("Please enter a number: \n");
scanf("%f", &amp;this_is_a_number1); /* read number in */
printf("You entered %f\n", this_is_a_number1);
printf("Please enter another number:\n ");
scanf("%f", &amp;this_is_a_number2); /* read number in */
printf("You entered %f\n", this_is_a_number2);
total = this_is_a_number1 / this_is_a_number2;/* divide the numbers */
printf("quotient is %f\n", total);
return 0;
}</pre>
<p>04.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* demonstrate a forloop */
main()
{
float this_is_a_number, total;
int i;
total = 0;
/* forloop goes round 10 times */
for (i = 0;i &lt; 10;i++)
{
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number); /* read number in */
total = total + this_is_a_number;
}
printf("Total Sum is = %f\n", total);
}</pre>
<p>05.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* demonstrate a nested forloop */
main()
{
float this_is_a_number, total;
int i, j;
total = 0;
/* outer forloop goes round 10 times */
for (i = 0;i &lt; 10;i++)
{
/* inner forloop goes round twice */
for (j = 0;j &lt; 2;j++)
{
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number); /* read number in */
total = total + this_is_a_number;
}
}
printf("Total Sum is = %f\n", total);
}</pre>
<p>06.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* demonstrate a do loop */
main()
{
float this_is_a_number, total;
int i;
total = 0;
i = 0;
/* do loop goes round until the value of i reaches 10 */
do {
printf("Please enter a number:\n ");
scanf("%f", &amp;this_is_a_number);
total = total + this_is_a_number;
i++;
}while( i &lt; 10);
printf("Total Sum is = %f\n", total);
}</pre>
<p>07.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
/* Example of an if operation */
int main()
{
int this_is_a_number;
printf( "Please enter an integer between 1 and 10:\n " );
scanf( "%d", &amp;this_is_a_number );
if (this_is_a_number &lt;6)
printf( "This number is less than 6;\n " );
printf( "Please enter an integer between 10 and 20:\n " );
scanf( "%d", &amp;this_is_a_number );
if (this_is_a_number &lt;16)
printf( "This number is less than 16\n " );
else
printf( "This number is greater than 15\n " );
return 0;
}</pre>
<p>08.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;
/* Example of an if then else if operation */
int main()
{
int this_is_a_number;
printf("Please enter an integer between 1 and 10:\n ");
scanf("%d", &amp;this_is_a_number);
if (this_is_a_number &lt; 6)
printf("This number is less than 6;\n ");
printf("Please enter an integer between 10 and 20:\n ");
scanf("%d", &amp;this_is_a_number);
if (this_is_a_number &lt; 16)
{
printf("This number is less than 16\n ");
}
else if (this_is_a_number == 20)
{
printf("This number is 20\n ");
}
else
{
printf("This number is greater than 15\n ");
}
return 0;
}</pre>
<p>09.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* program to show array use */
int main()
{
int arr1[8];/* define an array of 8 integers */
int i;
printf("enter 8 integer numbers\n");
for (i = 0;i &lt; 8;i++)
{
scanf("%d", &amp;arr1[i]);/* read into arr1[i] */
}
printf("Your 8 numbers are \n");
for (i = 0;i &lt; 8;i++)
{
printf("%d ", arr1[i]);
}
printf("\n");
}</pre>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include&lt;stdio.h&gt;
/* program to show character array use */
int main()
{
char arr2[10];/* define array of 10 characters */
int i;
printf("enter 10 characters \n");
for (i = 0;i &lt; 10;i++)
{
scanf("%c", &amp;arr2[i]);
}
printf("Your 10 characters are \n");
for (i = 0;i &lt; 10;i++)
{
printf("%c ", arr2[i]);
}
printf("\n");
}</pre>
<p></p>
<h3>jsliu</h3>
<p><video controls="controls" height="630" width="1008">
<source src="/images/jsliu.mp4" type="video/mp4"/></video></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c1.mp4" type="video/mp4"/></video></p>
<p>01.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Say Hello World!.
==================== */
#include &lt;stdio.h&gt;
void main()
{
/* 印出 Hello */
printf("Hello World!");
}</pre>
<p>02.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Say Hello World! Bye Bye.
==================== */
#include &lt;stdio.h&gt;
int main()
{
/* 印出 Hello World! Bye Bye */
printf("Hello World! ");
printf("Bye ");
printf("Bye");
return 0;
}</pre>
<p>03.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
變數宣告的例子 3.
==================== */
#include &lt;stdio.h&gt;
int main()
{
int a = 1;
int A = 8;
int b = 2, c;
c = A - a + b;
/* 輸出 a, A, b, c 到螢幕 */
printf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );
return 0;
}</pre>
<p>04.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
float a = 0.5;
double b = 1.2;
int c = 3;
b = b + a + c;
/* 輸出 a, b, c 到螢幕 */
printf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );
}</pre>
<p>05.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
輸入一個整數
========================= */
#include &lt;stdio.h&gt;
int main()
{
int i;
printf("Input an integer:");
scanf( "%d", &amp;i ); /* ch 前面加個 &amp;(位址運算元) */
printf( "the number is %d", i );
return 0;
}</pre>
<p>06.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
基本運算範例.
==================== */
#include&lt;stdio.h&gt;
int main()
{
int a,b;
a = 10; b = 3;
printf( "%d \n", a * b );
printf( "%d \n", a / b );
printf( "%d \n", a + b );
printf( "%d \n", a - b );
printf( "%d \n", a % b );
return 0;
}</pre>
<p>07.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
關係運算元的範例.
==================== */
#include &lt;stdio.h&gt;
int main()
{
int a = 10, b = 5;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
printf( "\n" );
b = 10;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
return 0;
}</pre>
<p>08.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
位元運算元的範例.
==================== */
#include&lt;stdio.h&gt;
void main()
{
int a,b;
a = 15;
b = 1;
printf("%d \n", a | b ); /* a OR b */
printf("%d \n", a &amp; b ); /* a AND b */
printf("%d \n", a ^ b ); /* a XOR b */
printf("%d \n", a &lt;&lt; 1 ); /* a 位元左移 1 位 */
printf("%d \n", a &gt;&gt; 1 ); /* a 位元右移一位 */
printf("%d \n", ~a ); /* A 的補數運算 */
}</pre>
<p>09.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Logical NOT.
==================== */
#include &lt;stdio.h&gt;
void main()
{
int a;
a = 3;
printf("%d\n", !a );
a = 0;
printf("%d\n", !a );
}</pre>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
sizeof 的範例.
==================== */
#include &lt;stdio.h&gt;
void main()
{
char a;
printf( " The size of int is %d \n", sizeof(int) );
printf( " The size of char a is %d \n", sizeof(a) );
}</pre>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>