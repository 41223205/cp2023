var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n', 'tags': '', 'url': 'About.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭檔案\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n clear \n cd downloads \n cc gnuplot_ex1.c \n ./a.out \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// cc roc_flag.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n    // 繪製紅色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 繪製藍色矩形區域\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n    // 繪製太陽\n    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\n    float angle = 0;\n    int numRays = 12; // 光芒的數量\n\n    gdPoint points[3]; // 三個頂點的陣列\n\n    for (int i = 0; i < numRays; i++) {\n        angle = i * (2 * M_PI / numRays);\n        float x1 = center_x + cos(angle) * sun_radius;\n        float y1 = center_y + sin(angle) * sun_radius;\n\n        // 調整兩個底邊頂點的位置\n      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\n      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\n      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\n      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n        // 設定多邊形的三個頂點\n        points[0].x = (int)x1;\n        points[0].y = (int)y1;\n        points[1].x = (int)x2;\n        points[1].y = (int)y2;\n        points[2].x = (int)x3;\n        points[2].y = (int)y3;\n\n        gdImageFilledPolygon(img, points, 3, white);\n    }\n  //外圈\n  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n} \n clear \n cd downloads \n cc gd_roc_flag.c -lgd -lm \n ./a.out \n \n // https://en.wikipedia.org/wiki/Flag_of_the_United_States\n// https://www.britannica.com/topic/flag-of-the-United-States-of-America\n// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開輸出檔案時出錯。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 紅色條紋\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色條紋\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 藍色矩形\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.129 * height); // 橫向星星之間的間距\n    int star_spacing_y = (int)(0.054 * height); // 縱向星星之間的間距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        // 計算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n\n            // 旋轉角度（以弧度為單位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋轉\n\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // 用指定的顏色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n clear \n cd downloads \n cc gd_usa_flag.c -lgd -lm \n ./a.out \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_proc_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_proc_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開輸出檔案時出錯。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 聲明 draw_star 函數\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_proc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 計算星形的五個外點和五個內點\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 繪製星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n clear \n cd downloads \n cc gd_proc_flag.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n \nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    draw_japan_flag(img);\n \n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n \n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    \n \n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n \n \n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n clear \n cd downloads \n cc gd_japan_flag.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n \nint main() {\n    // 設定國旗的寬和高\n    int width = 1200;\n    int height = width / 2;\n \n    // 建立圖像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    // 繪製英國國旗\n    draw_uk_flag(img);\n \n    // 將圖像保存到檔案\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打開輸出檔案時發生錯誤。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \n \n \nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n \n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 藍色\n \n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n \n \n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n \n    int x1, y1, x2, y2, x3, y3;\n \n    // 繪製白色斜線\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n \n     \n    // 繪製紅色斜線\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n \n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n \n  int x1, y1, x2, y2, x3, y3;\n   \n  // 繪製  斜線\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n   \n   \n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n \n \n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n     \n   \n  }\n   \n    // 繪製白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n \n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n \n    // 繪製紅色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n}\n \n \n clear \n cd downloads \n cc gd_uk_flag.c -lgd -lm \n ./a.out \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n \nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n \n    im = gdImageCreate(WIDTH, HEIGHT);\n \n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n \n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n \n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n \n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n \n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n \n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n \n  int circleX2 = 515;    // 圓心的 X 座標\n   \n int circleY2 = 337.5;\n \n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n   \n  {\n     \n   \n  // 起點和終點位置\n   \n  int startX = 340;    \n  // 線的起點 X 座標\n   \n  int startY = 90;   \n  // 線的起點 Y 座標\n   \n  int endX = 200;     \n  // 線的終點 X 座標\n   \n  int endY = 260;     \n  // 線的終點 Y 座標\n  \n  int lineWidth = 23;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n \n  int startX2 = 213;    \n  // 線的起點 X 座標\n \n  int startY2 = 270;   \n  // 線的起點 Y 座標\n \n  int endX2 = 133;     \n  // 線的終點 X 座標\n \n  int endY2 = 210;     \n  // 線的終點 Y 座標\n \n  int lineWidth2 = 25;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n \n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n \n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n \n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n \n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n   \n  int startX = 330;    \n  // 線的起點 X 座標\n   \n  int startY = 520;   \n  // 線的起點 Y 座標\n   \n  int endX = 190;     \n  // 線的終點 X 座標\n   \n  int endY = 350;     \n  // 線的終點 Y 座標\n  \n  int lineWidth = 23;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n \n  int startX2 = 213;    \n  // 線的起點 X 座標\n \n  int startY2 = 330;   \n  // 線的起點 Y 座標\n \n  int endX2 = 133;     \n  // 線的終點 X 座標\n \n  int endY2 = 390;     \n  // 線的終點 Y 座標\n \n  int lineWidth2 = 25;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n \n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n \n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n \n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n \n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n \n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n \n  }\n \n  {\n    // 起點和終點位置\n   \n  int startX = 564;    \n  // 線的起點 X 座標\n   \n  int startY = 520;   \n  // 線的起點 Y 座標\n   \n  int endX = 704;     \n  // 線的終點 X 座標\n   \n  int endY = 350;     \n  // 線的終點 Y 座標\n  \n  int lineWidth = 23;  // 線的寬度\n     \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n \n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n \n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n     \ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n     \n  int startX2 = 553;    \n  // 線的起點 X 座標\n \n  int startY2 = 330;   \n  // 線的起點 Y 座標\n \n  int endX2 = 633;     \n  // 線的終點 X 座標\n \n  int endY2 = 390;     \n  // 線的終點 Y 座標\n \n  int lineWidth2 = 25;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n \n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n \n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n \n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n   \n  int startX = 330;    \n  // 線的起點 X 座標\n   \n  int startY = 520;   \n  // 線的起點 Y 座標\n   \n  int endX = 190;     \n  // 線的終點 X 座標\n   \n  int endY = 350;     \n  // 線的終點 Y 座標\n  \n  int lineWidth = 23;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n \n  int startX2 = 213;    \n  // 線的起點 X 座標\n \n  int startY2 = 330;   \n  // 線的起點 Y 座標\n \n  int endX2 = 133;     \n  // 線的終點 X 座標\n \n  int endY2 = 390;     \n  // 線的終點 Y 座標\n \n  int lineWidth2 = 25;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n \n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n \n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n \n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n \n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n \n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n \n  }\n  {\n    // 起點和終點位置\n   \n  int startX = 564;    \n  // 線的起點 X 座標\n   \n  int startY = 97;   \n  // 線的起點 Y 座標\n   \n  int endX = 704;     \n  // 線的終點 X 座標\n   \n  int endY = 267;     \n  // 線的終點 Y 座標\n  \n  int lineWidth = 23;  // 線的寬度\n     \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n \n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n \n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n     \n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n     \n  int startX2 = 553;    \n  // 線的起點 X 座標\n \n  int startY2 = 277;   \n  // 線的起點 Y 座標\n \n  int endX2 = 633;     \n  // 線的終點 X 座標\n \n  int endY2 = 217;     \n  // 線的終點 Y 座標\n \n  int lineWidth2 = 25;  // 線的寬度\n \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n \n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n \n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n \n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n \n  }\n   \n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n clear \n cd downloads \n cc gd_korea_flag.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n\nfprintf(stderr, "Error opening the output file.\\n");\n\nreturn 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n cd downloads \n cc hellogd.c -lgd -lm \n ./a.out \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭檔案\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n cd downloads \n cc euler_gnuplot_msd_ex1.c \n ./a.out \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w15', 'text': '', 'tags': '', 'url': 'w15.html'}, {'title': 'ANSIC', 'text': '', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'Exercises', 'text': 'https://www.w3resource.com/c-programming-exercises / 自選 10 個練習範例 \n 01.編寫一個 C 程序，將指定的日期轉換為年、週和日。 註：忽略閏年。 \n 程式: \n #include <stdio.h>\n\nint main()\n{\n    int days, years, weeks;\n\n    days = 1329; // 總天數\n\n    // 將天數轉換為年、週和天\n    years = days / 365; // 計算年\n    weeks = (days % 365) / 7; // 計算週\n    days = days - ((years * 365) + (weeks * 7)); // 計算剩餘的天數\n\n    // 輸出結果\n    printf("Years: %d\\n", years); // 年\n    printf("Weeks: %d\\n", weeks); // 週\n    printf("Days: %d \\n", days);  // 天\n\n    return 0;\n} \n 測試資料： 天數：1329 預期輸出： 年：3 週：33 天：3 \n \n 02.寫一個 C 程序，接受使用者提供的兩個整數併計算這兩個整數的乘積。 \n 程式: \n c\nCopy code\n#include <stdio.h>\n\nint main() \n{\n    int x, y, result; // 宣告兩個整數和它們的乘積的變數\n\n    // 提示用戶輸入，並將輸入的值存儲在 \'x\' 中\n    printf("\\n輸入第一個整數："); \n    scanf("%d", &x);\n\n    // 提示用戶輸入，並將輸入的值存儲在 \'y\' 中\n    printf("\\n輸入第二個整數：");\n    scanf("%d", &y);\n\n    result = x * y; // 計算 \'x\' 和 \'y\' 的乘積\n\n    // 輸出乘積的結果\n    printf("上述兩個整數的乘積 = %d\\n", result);\n\n    return 0; // 表示程式執行成功的返回值\n} \n 測試資料： 輸入第一個整數：58 輸入第二個整數：69 預期輸出： 以上兩個整數的乘積 = 4002 \n \n 03.寫一個計算球體體積的 C 程式。 \n 程式: \n #include <stdio.h>     // 匯入標準輸入/輸出的標頭檔。\n\nfloat myradius;          /* 球體的半徑 */\nfloat myvolume;          /* 球體的體積（待計算） */\nchar line_text[50];      /* 從鍵盤輸入的一行文字 */\n\n/* 圓周率π的值到小數點後50位，取自維基百科 */\nconst float PI = 3.14159265358979323846264338327950288419716939937510;\n\nint main() {\n    printf("輸入球體的半徑：");  // 提示使用者輸入球體的半徑。\n    fgets(line_text, sizeof(line_text), stdin);  // 從使用者讀取一行輸入，並將其存儲在 \'line_text\' 中。\n    sscanf(line_text, "%f", &myradius);         // 將 \'line_text\' 中的輸入轉換為浮點數，並將其存儲在 \'myradius\' 中。\n\n    myvolume = (4.0 / 3.0) * PI * (myradius * myradius * myradius);  /* 使用公式計算球體的體積。 */\n    printf("球體的體積為 %f。\\n", myvolume);  // 輸出計算得到的球體體積。\n\n    return(0);   // 返回0以表示程式執行成功。\n}\n \n 測試資料: 輸入球體的半徑：2.56 \n 預計輸出: 球體的體積為 70.276237。 \n \n 04.用 C 語言編寫一個程序，讀取名字、姓氏和出生年份，並依序顯示姓名和年份。 \n 程式: \n #include <stdio.h>    // 包含標準輸入/輸出標頭檔。\n\nint main() {\n    char firstname[20], lastname[20];   // 宣告字元陣列，用於存儲名字和姓氏，每個最大長度為20個字元。\n    int bir_year;   // 宣告一個整數變數 \'bir_year\' 來存儲出生年份。\n\n    printf("輸入您的名字：");   // 提示使用者輸入他們的名字。\n    scanf("%s", firstname);   // 讀取並將使用者的輸入存儲在 \'firstname\' 中。\n\n    printf("輸入您的姓氏：");   // 提示使用者輸入他們的姓氏。\n    scanf("%s", lastname);   // 讀取並將使用者的輸入存儲在 \'lastname\' 中。\n\n    printf("輸入您的出生年份：");   // 提示使用者輸入他們的出生年份。\n    scanf("%d", &bir_year);   // 讀取並將使用者的輸入存儲在 \'bir_year\' 中。\n\n    printf("%s %s %d\\n", firstname, lastname, bir_year);   // 輸出名字、姓氏和出生年份。\n\n    return 0;   // 返回0以表示程式執行成功。\n}\n \n 測試資料: \n 輸入您的名字：Chen 輸入您的姓氏：Anjin 輸入您的出生年份：2004 Chen Anjin 2004 \n \n 05.如果給定兩個角，請寫一個 C 程式來求三角形的第三個角。 \n 程式: \n #include <stdio.h>\n\nint main()  \n{  \n    int ang1, ang2, ang3; /* 分別是三角形的三個角度 */\n  \n    /* 從使用者讀取兩個三角形的角度，以逗號分隔 */  \n    printf("輸入兩個三角形的角度，用逗號分隔：");  \n    scanf("%d, %d", &ang1, &ang2);  \n  \n    ang3 = 180 - (ang1 + ang2);  /* 計算第三個角度 */\n  \n    printf("三角形的第三個角度：%d\\n", ang3);  \n  \n    return 0;  \n}  \n \n 測試資料： 輸入以逗號分隔的三角形的兩個角：50,70 三角形的第三個角：60 \n \n 06.寫一個C 程式來檢查給定的數字是偶數還是奇數 \n 程式: \n #include <stdio.h>   // 包含標準輸入/輸出標頭檔。\n\nvoid main()\n{\n    int num1, rem1;   // 宣告兩個整數變數 \'num1\' 和 \'rem1\'。\n\n    printf("輸入一個整數：");   // 提示使用者輸入一個整數。\n    scanf("%d", &num1);   // 讀取並將使用者的輸入存儲在 \'num1\' 中。\n    rem1 = num1 % 2;   // 計算 \'num1\' 除以 2 的餘數。\n    if (rem1 == 0)   // 檢查餘數是否等於 0。\n        printf("%d 是偶數\\n", num1);   // 輸出一條消息，指示 \'num1\' 是偶數。\n    else\n        printf("%d 是奇數\\n", num1);    // 輸出一條消息，指示 \'num1\' 是奇數。\n}\n \n 測試資料：15 15 是奇數 \n \n 07.寫一個 C 程式來找出給定年份是否為閏年。 \n 程式: \n #include <stdio.h>   // 包含標準輸入/輸出標頭檔。\n\nvoid main()\n{\n    int chk_year;   // 宣告一個整數變數 \'chk_year\'。\n\n    printf("輸入一個年份：");   // 提示使用者輸入一個年份。\n    scanf("%d", &chk_year);   // 讀取並將使用者的輸入存儲在 \'chk_year\' 中。\n    if ((chk_year % 400) == 0)   // 檢查 \'chk_year\' 是否能被400整除且沒有餘數。\n        printf("%d 年是閏年。\\n", chk_year);   // 輸出一條消息，指示 \'chk_year\' 是閏年。\n    else if ((chk_year % 100) == 0)   // 檢查 \'chk_year\' 是否能被100整除且沒有餘數。\n        printf("%d 年不是閏年。\\n", chk_year);   // 輸出一條消息，指示 \'chk_year\' 不是閏年。\n    else if ((chk_year % 4) == 0)   // 檢查 \'chk_year\' 是否能被4整除且沒有餘數。\n        printf("%d 年是閏年。\\n", chk_year);   // 輸出一條消息，指示 \'chk_year\' 是閏年。\n    else\n        printf("%d 年不是閏年。\\n", chk_year);   // 輸出一條消息，指示 \'chk_year\' 不是閏年。\n}\n \n 測試資料：2023 2023年不是閏年。 \n \n 08.寫一個 C 程式來找出三個數中最大的一個。 \n 程式: \n #include <stdio.h>   // 包含標準輸入/輸出標頭檔。\n\nvoid main()\n{\n    int num1, num2, num3;   // 宣告三個整數變數 \'num1\'、\'num2\' 和 \'num3\'。\n\n    printf("輸入三個數字的值：");   // 提示使用者輸入三個數字。\n    scanf("%d %d %d", &num1, &num2, &num3);   // 讀取並將使用者的輸入存儲在 \'num1\'、\'num2\' 和 \'num3\' 中。\n\n    printf("第一個數字 = %d，\\t第二個數字 = %d，\\t第三個數字 = %d\\n", num1, num2, num3);   // 輸出 \'num1\'、\'num2\' 和 \'num3\' 的值。\n\n    if (num1 > num2)   // 檢查 \'num1\' 是否大於 \'num2\'。\n    {\n        if (num1 > num3)   // 如果 \'num1\' 也大於 \'num3\'。\n        {\n            printf("第一個數字是三個數字中最大的。\\n");   // 輸出一條消息，指示 \'num1\' 是最大的。\n        }\n        else\n        {\n            printf("第三個數字是三個數字中最大的。\\n");   // 輸出一條消息，指示 \'num3\' 是最大的。\n        }\n    }\n    else if (num2 > num3)   // 如果 \'num1\' 不是最大的，檢查 \'num2\' 是否大於 \'num3\'。\n        printf("第二個數字是三個數字中最大的。\\n");   // 輸出一條消息，指示 \'num2\' 是最大的。\n    else\n        printf("第三個數字是三個數字中最大的。\\n");   // 如果上述條件都不滿足，則 \'num3\' 必須是最大的。\n}\n \n 測試數據：12 25 52 預期輸出： 第一個數字 = 12，第二個數字 = 25，第三個數字 = 52 第三個數字是三個數字中最大的 \n \n 09.寫一個C 程式來檢查三角形是等邊三角形、等腰三角形還是不等邊三角形。 \n 程式: \n #include <stdio.h>  // 包含標準輸入/輸出標頭檔。\n\nint main()  \n{  \n    int sidea, sideb, sidec; // 宣告變數用於三角形的三邊。\n\n    /* \n     * 讀取三角形的所有邊長 \n     */  \n    printf("輸入三角形的三個邊長: ");  // 提示使用者輸入。\n    scanf("%d %d %d", &sidea, &sideb, &sidec);  // 讀取並存儲三角形的邊長。\n\n    if(sidea==sideb && sideb==sidec) // 檢查是否三邊長都相等。  \n    {  \n        printf("這是一個等邊三角形。\\n");  // 輸出等邊三角形的訊息。\n    }  \n    else if(sidea==sideb || sidea==sidec || sideb==sidec) // 檢查是否有兩邊長相等。  \n    {  \n        printf("這是一個等腰三角形。\\n");  // 輸出等腰三角形的訊息。\n    }  \n    else // 如果沒有邊長相等。  \n    {  \n        printf("這是一個不等邊三角形。\\n");  // 輸出不等邊三角形的訊息。\n    }  \n\n    return 0;  \n} \n \n 測試資料： 50 50 60 預期輸出： 這是一個等腰三角形。 \n \n 10.寫一個 C 程式來計算交易的損益。 \n 程式: \n #include <stdio.h>  // 包含標準輸入/輸出標頭檔。\n\nvoid main()  \n{  \n    int cprice, sprice, plamt;  // 宣告變數來存儲成本價格、售價和利潤/損失金額。\n\n    printf("輸入成本價格: ");  // 提示使用者輸入成本價格。\n    scanf("%d", &cprice);  // 讀取並存儲成本價格。\n    printf("輸入售價: ");  // 提示使用者輸入售價。\n    scanf("%d", &sprice);  // 讀取並存儲售價。\n\n    if(sprice > cprice)  // 檢查售價是否大於成本價格。\n    {  \n        plamt = sprice - cprice;  // 計算利潤金額。\n        printf("\\n您可以預定您的利潤金額: %d\\n", plamt);  // 輸出利潤消息。\n    }  \n    else if(cprice > sprice)  // 檢查成本價格是否大於售價。\n    {  \n        plamt = cprice - sprice;  // 計算損失金額。\n        printf("\\n您遭受了損失金額: %d\\n", plamt);  // 輸出損失消息。\n    }  \n    else  // 如果既沒有利潤也沒有損失。\n    {  \n        printf("\\n您處於無利潤、無損失的狀態。\\n");  // 輸出無利潤、無損失的消息。\n    }  \n}  \n \n 測試資料： 500 700 預期輸出： 您可以預訂您的利潤金額： 200 點 \n', 'tags': '', 'url': 'Exercises.html'}, {'title': 'c_ex', 'text': '', 'tags': '', 'url': 'c_ex.html'}, {'title': 'Introduction', 'text': '\n \n 01. \n /* Read in two integers , add them and display the answer */\n#define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\nint main()\n{\nint this_is_a_number1, this_is_a_number2, total;\nprintf("Please enter an integer number:\\n ");\nscanf("%d", &this_is_a_number1); /* read number in */\nprintf("You entered %d\\n", this_is_a_number1);\nprintf("Please enter another number: \\n");\nscanf("%d", &this_is_a_number2); /* read number in */\nprintf("You entered %d\\n", this_is_a_number2);\ntotal = this_is_a_number1 + this_is_a_number2;/* add two numbers */\nprintf("total is %d\\n", total);\nreturn 0;\n} \n 02. \n #define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n/* multiply two floating point numbers */\nint main()\n{\nfloat this_is_a_number1, this_is_a_number2, total;\nprintf("Please enter a number:\\n ");\nscanf("%f", &this_is_a_number1); /* read number in */\nprintf("You entered %f\\n", this_is_a_number1);\nprintf("Please enter another number: \\n");\nscanf("%f", &this_is_a_number2); /* read number in */\nprintf("You entered %f\\n", this_is_a_number2);\ntotal = this_is_a_number1 * this_is_a_number2;/* multiply the numbers */\nprintf("product is %f\\n", total);\nreturn 0;\n} \n 03. \n /* divide two floating point numbers */\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n/* divide two floating point numbers */\nint main()\n{\nfloat this_is_a_number1, this_is_a_number2, total;\nprintf("Please enter a number: \\n");\nscanf("%f", &this_is_a_number1); /* read number in */\nprintf("You entered %f\\n", this_is_a_number1);\nprintf("Please enter another number:\\n ");\nscanf("%f", &this_is_a_number2); /* read number in */\nprintf("You entered %f\\n", this_is_a_number2);\ntotal = this_is_a_number1 / this_is_a_number2;/* divide the numbers */\nprintf("quotient is %f\\n", total);\nreturn 0;\n} \n 04. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* demonstrate a forloop */\nmain()\n{\nfloat this_is_a_number, total;\nint i;\ntotal = 0;\n/* forloop goes round 10 times */\nfor (i = 0;i < 10;i++)\n{\nprintf("Please enter a number:\\n ");\nscanf("%f", &this_is_a_number); /* read number in */\ntotal = total + this_is_a_number;\n}\nprintf("Total Sum is = %f\\n", total);\n} \n 05. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* demonstrate a nested forloop */\nmain()\n{\nfloat this_is_a_number, total;\nint i, j;\ntotal = 0;\n/* outer forloop goes round 10 times */\nfor (i = 0;i < 10;i++)\n{\n/* inner forloop goes round twice */\nfor (j = 0;j < 2;j++)\n{\nprintf("Please enter a number:\\n ");\nscanf("%f", &this_is_a_number); /* read number in */\ntotal = total + this_is_a_number;\n}\n}\nprintf("Total Sum is = %f\\n", total);\n} \n 06. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* demonstrate a do loop */\nmain()\n{\nfloat this_is_a_number, total;\nint i;\ntotal = 0;\ni = 0;\n/* do loop goes round until the value of i reaches 10 */\ndo {\nprintf("Please enter a number:\\n ");\nscanf("%f", &this_is_a_number);\ntotal = total + this_is_a_number;\ni++;\n}while( i < 10);\nprintf("Total Sum is = %f\\n", total);\n} \n 07. \n #include <stdio.h>\n/* Example of an if operation */\nint main()\n{\nint this_is_a_number;\nprintf( "Please enter an integer between 1 and 10:\\n " );\nscanf( "%d", &this_is_a_number );\nif (this_is_a_number <6)\nprintf( "This number is less than 6;\\n " );\nprintf( "Please enter an integer between 10 and 20:\\n " );\nscanf( "%d", &this_is_a_number );\nif (this_is_a_number <16)\nprintf( "This number is less than 16\\n " );\nelse\nprintf( "This number is greater than 15\\n " );\nreturn 0;\n} \n 08. \n #define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n/* Example of an if then else if operation */\nint main()\n{\nint this_is_a_number;\nprintf("Please enter an integer between 1 and 10:\\n ");\nscanf("%d", &this_is_a_number);\nif (this_is_a_number < 6)\nprintf("This number is less than 6;\\n ");\nprintf("Please enter an integer between 10 and 20:\\n ");\nscanf("%d", &this_is_a_number);\nif (this_is_a_number < 16)\n{\nprintf("This number is less than 16\\n ");\n}\nelse if (this_is_a_number == 20)\n{\nprintf("This number is 20\\n ");\n}\nelse\n{\nprintf("This number is greater than 15\\n ");\n}\nreturn 0;\n} \n 09. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* program to show array use */\nint main()\n{\nint arr1[8];/* define an array of 8 integers */\nint i;\nprintf("enter 8 integer numbers\\n");\nfor (i = 0;i < 8;i++)\n{\nscanf("%d", &arr1[i]);/* read into arr1[i] */\n}\nprintf("Your 8 numbers are \\n");\nfor (i = 0;i < 8;i++)\n{\nprintf("%d ", arr1[i]);\n}\nprintf("\\n");\n} \n 10. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* program to show character array use */\nint main()\n{\nchar arr2[10];/* define array of 10 characters */\nint i;\nprintf("enter 10 characters \\n");\nfor (i = 0;i < 10;i++)\n{\nscanf("%c", &arr2[i]);\n}\nprintf("Your 10 characters are \\n");\nfor (i = 0;i < 10;i++)\n{\nprintf("%c ", arr2[i]);\n}\nprintf("\\n");\n} \n', 'tags': '', 'url': 'Introduction.html'}, {'title': 'jsliu', 'text': '\n \n \n \n 01. \n /* ====================\nSay Hello World!.\n==================== */\n#include <stdio.h>\nvoid main()\n{\n/* 印出 Hello */\nprintf("Hello World!");\n} \n 02. \n /* ====================\nSay Hello World! Bye Bye.\n==================== */\n#include <stdio.h>\nint main()\n{\n/* 印出 Hello World! Bye Bye */\nprintf("Hello World! ");\nprintf("Bye ");\nprintf("Bye");\nreturn 0;\n} \n 03. \n /* ====================\n變數宣告的例子 3.\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 1;\nint A = 8;\nint b = 2, c;\nc = A - a + b;\n/* 輸出 a, A, b, c 到螢幕 */\nprintf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );\nreturn 0;\n} \n 04. \n #include <stdio.h>\nvoid main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n/* 輸出 a, b, c 到螢幕 */\nprintf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );\n} \n 05. \n /* =========================\n輸入一個整數\n========================= */\n#include <stdio.h>\nint main()\n{\nint i;\nprintf("Input an integer:");\nscanf( "%d", &i ); /* ch 前面加個 &(位址運算元) */\nprintf( "the number is %d", i );\nreturn 0;\n} \n 06. \n /* ====================\n基本運算範例.\n==================== */\n#include<stdio.h>\nint main()\n{\nint a,b;\na = 10; b = 3;\nprintf( "%d \\n", a * b );\nprintf( "%d \\n", a / b );\nprintf( "%d \\n", a + b );\nprintf( "%d \\n", a - b );\nprintf( "%d \\n", a % b );\nreturn 0;\n} \n 07. \n /* ====================\n關係運算元的範例.\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 10, b = 5;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nprintf( "\\n" );\nb = 10;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nreturn 0;\n} \n 08. \n /* ====================\n位元運算元的範例.\n==================== */\n#include<stdio.h>\nvoid main()\n{\nint a,b;\na = 15;\nb = 1;\nprintf("%d \\n", a | b ); /* a OR b */\nprintf("%d \\n", a & b ); /* a AND b */\nprintf("%d \\n", a ^ b ); /* a XOR b */\nprintf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\nprintf("%d \\n", a >> 1 ); /* a 位元右移一位 */\nprintf("%d \\n", ~a ); /* A 的補數運算 */\n} \n 09. \n /* ====================\nLogical NOT.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint a;\na = 3;\nprintf("%d\\n", !a );\na = 0;\nprintf("%d\\n", !a );\n} \n 10. \n /* ====================\nsizeof 的範例.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nchar a;\nprintf( " The size of int is %d \\n", sizeof(int) );\nprintf( " The size of char a is %d \\n", sizeof(a) );\n} \n', 'tags': '', 'url': 'jsliu.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};